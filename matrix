#include <iostream>
#include <map>


class Mattr {
public:
    operator int() { return 10; }
    void operator =(const int &a) 
    {
        if (a == 5)
            std::cout << "equal" << std::endl;
        else
            std::cout << "don't equal" << std::endl;
    }
private:
    std::map<int, std::map<int, int>> mat;
};

class IntAdapter {
public:
    operator int() { return 10; }
    void operator =(const int &a) 
    {
        if (a == 5)
            std::cout << "equal" << std::endl;
        else
            std::cout << "don't equal" << std::endl;
    }
};

template<typename T, int default_number>
class Matrix {
public:

    class RowProxy {
    friend class Matrix;
    public:
        RowProxy(Matrix &parent, int row) : 
            parent(parent),
            row(row)
        { }
        
        int& operator[](int col)
        {
             if ( parent.mat.find(row) != parent.mat.end() )
             {
                 if ( parent.mat[row].find(col) != parent.mat[row].end()) {
                     std::cout << "exist" << std::endl;
                     return parent.mat[row][col];
                 }
            }
            std::cout << "new" << std::endl;
            parent.mat[row][col] = default_number;
            return parent.mat[row][col];
        }
    private:
        Matrix& parent;
        int row;
    };
    
    RowProxy operator[](int row)
    {
        return RowProxy(*this, row);
    }
    std::map<int, std::map<int, int>> mat;
};


int main() {
    Matrix<int, -1> matrix;
    matrix[0][0];
    matrix[0][1] = 2;
    std::cout << matrix[0][1] << std::endl;
    std::cout << matrix[0][0] << std::endl;
    std::cout << matrix[3][3] << std::endl;
    Mattr mattr;
    std::cout << mattr << std::endl;
    mattr = 5;
    return 0;
}
